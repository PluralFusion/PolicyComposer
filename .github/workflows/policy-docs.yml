name: Policy Document Manager

on:
  push:
    branches:
      - main
    paths:
      - 'policies/**.md'
      - 'conf/**'
  workflow_dispatch:

jobs:
  build:
    name: Build Policy Documents
    runs-on: ubuntu-latest
    # Define outputs for the 'publish-github-release' job
    outputs:
      is_global_release: ${{ steps.check_version.outputs.is_global_release }}
      release_version: ${{ steps.check_version.outputs.release_version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history so 'git log' and 'git diff' work
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-latex-extra
          pip install PyYAML Jinja2

      - name: List Available Fonts (for debugging)
        run: |
          echo "--- START OF INSTALLED FONTS ---"
          fc-list | cut -d: -f2 | sort | uniq > font_list.txt
          echo "--- END OF INSTALLED FONTS ---"
          
      - name: Check for Global Release
        id: check_version
        run: |
          IS_GLOBAL_RELEASE="false"
          NEW_VERSION=""
          
          # Check if config.yaml was part of the last commit
          # Use '|| true' to prevent failure on first commit (no HEAD~1)
          if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -q "conf/config.yaml"; then
            echo "conf/config.yaml was changed in the last commit."
            
            # Get old and new version values from git
            OLD_VERSION=$(git show HEAD~1:conf/config.yaml 2>/dev/null | grep 'release_version:' | awk '{print $2}' | tr -d '"' || echo "none")
            NEW_VERSION=$(grep 'release_version:' conf/config.yaml | awk '{print $2}' | tr -d '"')
            
            if [ "$OLD_VERSION" != "$NEW_VERSION" ] && [ -n "$NEW_VERSION" ]; then
              echo "Global release detected! Version changed from $OLD_VERSION to $NEW_VERSION."
              IS_GLOBAL_RELEASE="true"
            else
              echo "config.yaml changed, but release_version is the same."
            fi
          else
            echo "config.yaml was not changed. This is not a global release."
          fi
          
          # --- This is the corrected syntax ---
          # Use Environment Files to set outputs
          echo "is_global_release=$IS_GLOBAL_RELEASE" >> $GITHUB_OUTPUT
          echo "release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # --- End of corrected syntax ---

      - name: Generate Git History
        env:
          CURRENT_COMMIT_SHA: ${{ github.sha }}
          CURRENT_COMMIT_ACTOR: ${{ github.actor }}
          CURRENT_COMMIT_MSG: ${{ github.event.head_commit.message }}
          IS_GLOBAL_RELEASE: ${{ steps.check_version.outputs.is_global_release }} # Read output from previous step
        run: python scripts/get_git_history.py

      - name: Run Policy Build Script
        run: python scripts/process_policies.py

      - name: Upload Processed Markdown Artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-markdown-policies
          path: md/

      - name: Upload PDF Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: policy-pdfs
          path: pdf/
          
      - name: Upload Font List Artifact
        uses: actions/upload-artifact@v4
        with:
          name: available-fonts
          path: font_list.txt

  publish-github-release:
    name: Publish GitHub Release
    # Run only if the 'build' job detected a global release
    if: needs.build.outputs.is_global_release == 'true'
    needs: build # Wait for the build job to finish
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # Permission to create a release
      
    steps:
      - name: Download PDF Artifacts
        uses: actions/download-artifact@v4
        with:
          name: policy-pdfs
          path: pdfs/
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.build.outputs.release_version }} \
            --title "Policy Documents ${{ needs.build.outputs.release_version }}" \
            --notes "Official release of all policy documents for version ${{ needs.build.outputs.release_version }}." \
            pdfs/combined_policies.pdf \
            pdfs/

